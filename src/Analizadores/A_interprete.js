/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var A_interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,20],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[1,21],$Vh=[1,27],$Vi=[2,5,18,19,20,22,27,32,34,35,36,37,38,42,46,51,52,53,54,55],$Vj=[1,50],$Vk=[1,43],$Vl=[1,42],$Vm=[1,41],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,55],$Vu=[1,59],$Vv=[1,57],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[25,27],$VA=[2,15],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[1,86],$VQ=[17,26,32,33,44,49,58,59,60,61,62,63,64,65,67,68,69,70,71,72,79],$VR=[17,33],$VS=[2,32],$VT=[1,96],$VU=[17,26,32,33,44,49,64,65,79],$VV=[2,5,18,19,20,22,27,32,34,35,36,37,38,42,43,46,51,52,53,54,55,59,66,73,74,75,76,77,78],$VW=[33,44],$VX=[17,26,32,33,44,49,58,59,64,65,67,68,69,70,71,72,79],$VY=[17,26,32,33,44,49,58,59,60,61,64,65,67,68,69,70,71,72,79],$VZ=[17,26,32,33,44,49,64,65,67,68,69,70,71,72,79],$V_=[1,155],$V$=[1,184],$V01=[32,33],$V11=[2,18,19,20,22,27,34,35,36,37,38,42,46,51,52,53,54,55],$V21=[2,46],$V31=[2,45],$V41=[2,47],$V51=[2,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"print":9,"sent_if":10,"sent_switch":11,"sent_while":12,"sent_doWhile":13,"sent_for":14,"funciones":15,"llamada":16,"PYC":17,"EJECUTAR":18,"BREAK":19,"RETURN":20,"e":21,"CONTINUE":22,"tipo":23,"lista_simbolos":24,"CORA":25,"CORC":26,"ID":27,"IGUAL":28,"NEW":29,"LLAVA":30,"ListaVector":31,"LLAVC":32,"COMA":33,"INT":34,"DOUBLE":35,"STRING":36,"CHAR":37,"BOOLEAN":38,"incremento":39,"asignacionFor":40,"devolverIncremento":41,"IF":42,"PARA":43,"PARC":44,"ELSE":45,"SWITCH":46,"switch_case":47,"CASE":48,"DSPNTS":49,"DEFAULT":50,"WHILE":51,"DO":52,"FOR_CIC":53,"PRINT":54,"VOID":55,"lista_parametros":56,"lista_exp":57,"MAS":58,"MENOS":59,"MULTI":60,"DIV":61,"MODULO":62,"POTENCIA":63,"AND":64,"OR":65,"NOT":66,"MAYORQUE":67,"MENORIGUAL":68,"MAYORIGUAL":69,"MENORQUE":70,"IGUALIGUAL":71,"NOTIGUAL":72,"DECIMAL":73,"ENTERO":74,"CADENA":75,"CHARVAR":76,"TRUE":77,"FALSE":78,"INTERROGACION":79,"INCRE":80,"DECRE":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"PYC",18:"EJECUTAR",19:"BREAK",20:"RETURN",22:"CONTINUE",25:"CORA",26:"CORC",27:"ID",28:"IGUAL",29:"NEW",30:"LLAVA",32:"LLAVC",33:"COMA",34:"INT",35:"DOUBLE",36:"STRING",37:"CHAR",38:"BOOLEAN",42:"IF",43:"PARA",44:"PARC",45:"ELSE",46:"SWITCH",48:"CASE",49:"DSPNTS",50:"DEFAULT",51:"WHILE",52:"DO",53:"FOR_CIC",54:"PRINT",55:"VOID",58:"MAS",59:"MENOS",60:"MULTI",61:"DIV",62:"MODULO",63:"POTENCIA",64:"AND",65:"OR",66:"NOT",67:"MAYORQUE",68:"MENORIGUAL",69:"MAYORIGUAL",70:"MENORQUE",71:"IGUALIGUAL",72:"NOTIGUAL",73:"DECIMAL",74:"ENTERO",75:"CADENA",76:"CHARVAR",77:"TRUE",78:"FALSE",79:"INTERROGACION",80:"INCRE",81:"DECRE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,3],[6,2],[6,3],[6,2],[6,2],[6,1],[7,3],[7,11],[7,9],[31,3],[31,1],[23,1],[23,1],[23,1],[23,1],[23,1],[24,3],[24,5],[24,1],[24,3],[8,4],[8,3],[8,7],[40,3],[40,1],[41,2],[10,7],[10,11],[10,9],[11,7],[47,7],[47,6],[47,5],[47,6],[12,7],[13,9],[14,10],[14,10],[9,5],[15,7],[15,8],[15,8],[15,7],[56,4],[56,2],[16,3],[16,4],[57,3],[57,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,5],[21,1],[21,1],[21,4],[39,1],[39,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$= new ast.default($$[$0-1]);  return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 38:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = $$[$0-1]; 
break;
case 14:
 this.$ = new ejecutar.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 15:
 this.$ = new detener.default(_$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 16:
 this.$ = new Retornar.default($$[$0-1],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 17:
 this.$ = new Retornar.default( new primitivo.default("null", 5,$$[$0-1].first_line, $$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 18:
 this.$ = new Contiunar.default(_$[$0-1].first_line, _$[$0-1].last_column); console.log("continue declarado");
break;
case 19:
 console.log("Error Sintactico" + yytext 
                                    + "linea: " + this._$.first_line 
                                    + "columna: " + this._$.first_column); 
                        
                                new errores.default("Lexico", "No se esperaba el caracter "+ yytext , 
                                                this._$.first_line ,this._$.first_column);            
                            
break;
case 20:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 21:
 this.$ = new declaracionVectores.default(new tipo.default($$[$0-10].stype+"VEC") , $$[$0-7], false, $$[$0-2], _$[$0-10].first_line, _$[$0-10].last_column, $$[$0-2],) ;
break;
case 22:
 this.$ = new declaracionVectores.default(new tipo.default($$[$0-8].stype+"VEC")  , $$[$0-5], true, $$[$0-2], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 23:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 24:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 25:
 this.$ = new tipo.default('ENTERO'); 
break;
case 26:
 this.$ = new tipo.default('DOBLE'); 
break;
case 27:
 this.$ = new tipo.default('STRING'); 
break;
case 28:
 this.$ = new tipo.default('CARACTER'); 
break;
case 29:
 this.$ = new tipo.default('BOOLEAN'); 
break;
case 30:
 this.$ = $$[$0-2]; this.$.push(new simbolo.default(1,null,$$[$0], null)); 
break;
case 31:
 this.$ = $$[$0-4]; this.$.push(new simbolo.default(1,null,$$[$0-2], $$[$0])); 
break;
case 32:
 this.$ = new Array(); this.$.push(new simbolo.default(1,null,$$[$0], null)); 
break;
case 33:
 this.$ = new Array(); this.$.push(new simbolo.default(1,null,$$[$0-2], $$[$0])); 
break;
case 34:
 this.$ = new asignacion.default($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 35:
 this.$ = new asignacionTardia.default($$[$0-2],$$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 36:
 this.$ = new asignacionVector.default($$[$0-6],$$[$0-4], $$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 37:
 this.$ = new asignacion.default($$[$0-2],$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 39:
 this.$ = new asignacionTardia.default($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 40:
 this.$ = new Ifs.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 41:
 this.$ = new Ifs.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 42:
 this.$ = new Ifs.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 43:
 this.$ = new Switch.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 44:
 this.$ = $$[$0-6]; this.$.push(new Case_SW.default($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].last_column)); 
break;
case 45:
 this.$ = $$[$0-5]; this.$.push(new Default_SW.default( $$[$0-2], _$[$0-5].first_line, _$[$0-5].last_column)); 
break;
case 46:
 this.$ = new Array(); this.$.push(new Default_SW.default( $$[$0-2], _$[$0-4].first_line, _$[$0-4].last_column)); 
break;
case 47:
 this.$ = new Array(); this.$.push( new Case_SW.default($$[$0-4], $$[$0-2], _$[$0-5].first_line, _$[$0-5].last_column) ); 
break;
case 48:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 49:
 this.$ = new DoWhile.default($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 50:
 this.$ = new For.default($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1],false, _$[$0-9].first_line, _$[$0-9].last_column); 
break;
case 51:
 this.$ = new For.default($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1],true, _$[$0-9].first_line, _$[$0-9].last_column); 
break;
case 52:
this.$ = new Print.default($$[$0-2], true,_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 53:
 this.$ = new funcion.default(3, new tipo.default('VOID'), $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column ); console.log("Metodo declarado");
break;
case 54:
 this.$ = new funcion.default(3, new tipo.default('VOID'), $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column ); console.log("Funcion declarado");
break;
case 55:
 this.$ = new funcion.default(2, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column ); console.log("Funcion declarado");
break;
case 56:
 this.$ = new funcion.default(2, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column ); console.log("Metodo declarado");
break;
case 57:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6,$$[$0-1], $$[$0], null)); 
break;
case 58:
 this.$ = new Array(); this.$.push(new simbolo.default(6,$$[$0-1],$$[$0], null)); 
break;
case 59:
 this.$ = new llamada.default($$[$0-2], [],_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 60:
 this.$ = new llamada.default($$[$0-3], $$[$0-1] ,_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 61:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 62:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 63:
this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 64:
this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 65:
this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 66:
this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 67:
this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 68:
this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 69:
this.$ = new logica.default($$[$0-2], '&&', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 70:
this.$ = new logica.default($$[$0-2], '||', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 71:
this.$ = new logica.default($$[$0], '!', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 72:
this.$ = new relacional.default($$[$0-2], '>', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 73:
this.$ = new relacional.default($$[$0-2], '<=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 74:
this.$ = new relacional.default($$[$0-2], '>=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 75:
this.$ = new relacional.default($$[$0-2], '<', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 76:
this.$ = new relacional.default($$[$0-2], '==', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 77:
this.$ = new relacional.default($$[$0-2], '!=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 78:
this.$ = new aritmetica.default($$[$0], 'UNARIO', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 79:
this.$ = $$[$0-1];
break;
case 80:
this.$ = new primitivo.default(Number(yytext), 1,$$[$0].first_line, $$[$0].last_column);
break;
case 81:
this.$ = new primitivo.default(Number(yytext), 0,$$[$0].first_line, $$[$0].last_column);
break;
case 82:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 4,$$[$0].first_line, $$[$0].last_column);
break;
case 83:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 3,$$[$0].first_line, $$[$0].last_column);
break;
case 84:
this.$ = new primitivo.default(true, 2,$$[$0].first_line, $$[$0].last_column);
break;
case 85:
this.$ = new primitivo.default(false, 2,$$[$0].first_line, $$[$0].last_column);
break;
case 86:
this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 87:
this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 88:
this.$ = new ValorDevuelto.default($$[$0], 0,$$[$0].first_line, $$[$0].last_column);
break;
case 89:
this.$ = new ValorDevuelto.default($$[$0], true,$$[$0].first_line, $$[$0].last_column);
break;
case 90:
this.$ = new primitivoVector.default($$[$0-3], $$[$0-1],$$[$0-3].first_line, $$[$0-3].last_column);
break;
case 91:
this.$ = new aritmetica.default(new primitivo.default(0, 0,$$[$0].first_line, $$[$0].last_column),  '+', new primitivo.default(1, 0,$$[$0].first_line, $$[$0].last_column), $$[$0].first_line, $$[$0].last_column, false);
break;
case 92:
this.$ = new aritmetica.default(new primitivo.default(0, 0,$$[$0].first_line, $$[$0].last_column), '-', new primitivo.default(1, 0,$$[$0].first_line, $$[$0].last_column), $$[$0].first_line, $$[$0].last_column, false);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{1:[3]},{2:$V0,5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),{17:[1,35]},{16:36,27:[1,37]},{17:[1,38]},{16:52,17:[1,40],21:39,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{17:[1,53]},o($Vi,[2,19]),{24:54,25:$Vt,27:[1,56]},{25:$Vu,28:$Vv,39:58,43:$Vw,80:$Vx,81:$Vy},{43:[1,63]},{43:[1,64]},{43:[1,65]},{43:[1,66]},{30:[1,67]},{43:[1,68]},{27:[1,69]},o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),o($Vz,[2,28]),o($Vz,[2,29]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,13]),{17:[1,70]},{43:$Vw},o($Vi,$VA),{17:[1,71],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($Vi,[2,17]),{16:52,21:87,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:88,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:89,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VQ,[2,80]),o($VQ,[2,81]),o($VQ,[2,82]),o($VQ,[2,83]),o($VQ,[2,84]),o($VQ,[2,85]),o($VQ,[2,86],{39:91,25:[1,90],43:$Vw,80:$Vx,81:$Vy}),o($VQ,[2,88]),o($VQ,[2,89]),o($Vi,[2,18]),{17:[1,92],33:[1,93]},{26:[1,94]},o($VR,$VS,{28:$VT,43:[1,95]}),{16:52,21:97,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{17:[1,98]},{16:52,21:99,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:102,27:$Vj,41:51,43:$Vk,44:[1,100],57:101,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VQ,[2,91]),o($VQ,[2,92]),{16:52,21:103,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:104,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:105,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:106,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{2:$V0,4:107,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{7:108,8:109,23:110,27:[1,111],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{43:[1,112]},o($Vi,[2,14]),o($Vi,[2,16]),{16:52,21:113,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:114,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:115,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:116,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:117,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:118,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:119,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:120,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:121,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:122,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:123,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:124,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:125,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:126,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:127,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VU,[2,71],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO}),o($VQ,[2,78]),{44:[1,128],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{16:52,21:129,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VQ,[2,39]),o($VV,[2,20]),{27:[1,130]},{27:[1,131]},{23:134,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,44:[1,133],56:132},{16:52,21:135,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{17:[1,136],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($VV,[2,35]),{26:[1,137],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($VQ,[2,59]),{33:[1,139],44:[1,138]},o($VW,[2,62],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP}),{44:[1,140],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{44:[1,141],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{44:[1,142],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{44:[1,143],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,144],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{16:52,21:145,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{16:52,21:146,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{24:54,25:$Vt,27:[1,147]},{25:$Vu,28:$Vv,39:58,80:$Vx,81:$Vy},{23:134,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,44:[1,148],56:149},o($VX,[2,63],{60:$VD,61:$VE,62:$VF,63:$VG}),o($VX,[2,64],{60:$VD,61:$VE,62:$VF,63:$VG}),o($VY,[2,65],{62:$VF,63:$VG}),o($VY,[2,66],{62:$VF,63:$VG}),o($VQ,[2,67]),o([17,26,32,33,44,49,58,59,60,61,63,64,65,67,68,69,70,71,72,79],[2,68],{62:$VF}),o($VU,[2,69],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO}),o([17,26,32,33,44,49,65,79],[2,70],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO}),o($VZ,[2,72],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,73],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,74],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,75],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,76],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,77],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{49:[1,150],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($VQ,[2,79]),{26:[1,151],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($VR,[2,30],{28:[1,152]}),{28:[1,153]},{33:$V_,44:[1,154]},{30:[1,156]},{27:[1,157]},o($VR,[2,33],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP}),o($VV,[2,34]),{28:[1,158]},o($VQ,[2,60]),{16:52,21:159,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{17:[1,160]},{30:[1,161]},{30:[1,162]},{30:[1,163]},{51:[1,164]},{17:[1,165],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{17:[1,166],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($VR,$VS,{28:$VT}),{30:[1,167]},{33:$V_,44:[1,168]},{16:52,21:169,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VQ,[2,90]),{16:52,21:170,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{29:[1,171],30:[1,172]},{30:[1,173]},{23:174,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{2:$V0,4:175,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($VW,[2,58]),{16:52,21:176,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VW,[2,61],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP}),o($Vi,[2,52]),{2:$V0,4:177,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{47:178,48:[1,180],50:[1,179]},{2:$V0,4:181,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{43:[1,182]},{27:$V$,40:183,41:185},{27:$V$,40:186,41:185},{2:$V0,4:187,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{30:[1,188]},o([17,26,32,33,44,49],[2,87],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP}),o($VR,[2,31],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP}),{23:189,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{16:52,21:191,27:$Vj,31:190,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{2:$V0,4:192,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{27:[1,193]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,194],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{17:[1,195],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,196],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{32:[1,197],48:[1,198],50:[1,199]},{49:[1,200]},{16:52,21:201,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,202],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{16:52,21:203,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{44:[1,204]},{28:[1,205],39:91,80:$Vx,81:$Vy},{44:[2,38]},{44:[1,206]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,207],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:208,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{25:[1,209]},{32:[1,210],33:[1,211]},o($V01,[2,24],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP}),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,212],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($VW,[2,57]),o($Vi,[2,56]),o($VV,[2,36]),o($Vi,[2,40],{45:[1,213]}),o($Vi,[2,43]),{16:52,21:214,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{49:[1,215]},{2:$V0,4:216,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{49:[1,217],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($Vi,[2,48]),{44:[1,218],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{30:[1,219]},{16:52,21:220,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{30:[1,221]},o($Vi,[2,53]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,222],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{16:52,21:223,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{17:[1,224]},{16:52,21:225,27:$Vj,41:51,43:$Vk,59:$Vl,66:$Vm,73:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($Vi,[2,55]),{10:227,30:[1,226],42:$Vb},{49:[1,228],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{2:$V0,4:229,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:[1,230],20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:231,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{17:[1,232]},{2:$V0,4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{44:[2,37],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},{2:$V0,4:234,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($Vi,[2,54]),{26:[1,235],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP},o($VV,[2,22]),o($V01,[2,23],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,79:$VP}),{2:$V0,4:236,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($Vi,[2,42]),{2:$V0,4:237,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:[1,238],20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{17:[1,239]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:[1,240],20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($Vi,[2,49]),{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,241],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,242],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{17:[1,243]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:$V2,20:$V3,22:$V4,23:19,27:$V5,32:[1,244],34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V1,19:[1,245],20:$V3,22:$V4,23:19,27:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,42:$Vb,46:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{17:[1,246]},o($V11,$VA,{32:$V21,48:$V21,50:$V21}),{17:[1,247]},o($Vi,[2,50]),o($Vi,[2,51]),o($VV,[2,21]),o($Vi,[2,41]),{17:[1,248]},o($V11,$VA,{32:$V31,48:$V31,50:$V31}),o($V11,$VA,{32:$V41,48:$V41,50:$V41}),o($V11,$VA,{32:$V51,48:$V51,50:$V51})],
defaultActions: {33:[2,1],185:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const evaluar = require('../Clases/Evaluar');
    const aritmetica = require('../Clases/Expresiones/Operaciones/Aritmetica');
    const logica = require('../Clases/Expresiones/Operaciones/Logica');
    const relacional = require('../Clases/Expresiones/Operaciones/Relacional');
    const primitivo = require('../Clases/Expresiones/Primitivo');
    const ValorDevuelto = require('../Clases/Expresiones/ValorDevuelto');
    const primitivoVector = require('../Clases/Expresiones/PrimitivoVector');

    const ast = require('../Clases/Ast/Ast');
    const declaracion = require('../Clases/Instrucciones/Declaracion');
    const declaracionVectores = require('../Clases/Instrucciones/DeclaracionVectores');

    const asignacion = require('../Clases/Instrucciones/Asignacion');
    const asignacionVector = require('../Clases/Instrucciones/AsignacionVector');
    const asignacionTardia = require('../Clases/Instrucciones/AsignacionTardia');
    const simbolo = require('../Clases/TablaSimbolos/Simbolos');
    const tipo = require('../Clases/TablaSimbolos/Tipo');

    const identificador = require('../Clases/Expresiones/Identificador');
    const ternario = require('../Clases/Expresiones/Ternario');

    const Print = require('../Clases/Instrucciones/Print');
    const Ifs = require('../Clases/Instrucciones/SentenciaControl/Ifs');
    const Switch = require('../Clases/Instrucciones/SentenciaControl/Switch');
    const Case_SW = require('../Clases/Instrucciones/SentenciaControl/Case_SW');
    const Default_SW = require('../Clases/Instrucciones/SentenciaControl/Default_SW');
    const While = require('../Clases/Instrucciones/SentenciaCiclica/While');
    const DoWhile = require('../Clases/Instrucciones/SentenciaCiclica/DoWhile');
    const For = require('../Clases/Instrucciones/SentenciaCiclica/For');

    const funcion = require('../Clases/Instrucciones/Funcion');
    const llamada = require('../Clases/Instrucciones/Llamada');

    const ejecutar = require('../Clases/Instrucciones/Ejecutar');

    const detener = require('../Clases/Instrucciones/SentenciaTransferencia/Break');
    const Retornar = require('../Clases/Instrucciones/SentenciaTransferencia/Return');
    const Contiunar = require('../Clases/Instrucciones/SentenciaTransferencia/Continue');
    const errores = require('../Clases/Ast/Errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("INCRE : "+ yy_.yytext); return 80
break;
case 3: console.log("DECRE : "+ yy_.yytext); return 81
break;
case 4: console.log("PARA : "+ yy_.yytext); return 43
break;
case 5: console.log("PARC : "+ yy_.yytext); return 44
break;
case 6: console.log("CORA : "+ yy_.yytext); return 25
break;
case 7: console.log("CORC : "+ yy_.yytext); return 26
break;
case 8: console.log("PYC : "+ yy_.yytext); return 17
break;
case 9: console.log("COMA : "+ yy_.yytext); return 33
break;
case 10: console.log("NOTIGUAL : "+ yy_.yytext); return 72
break;
case 11: console.log("IGUALIGUAL : "+ yy_.yytext); return 71
break;
case 12: console.log("IGUAL : "+ yy_.yytext); return 28
break;
case 13: console.log("INTERROGACION : "+ yy_.yytext); return 79
break;
case 14: console.log("DSPNTS : "+ yy_.yytext); return 49
break;
case 15: console.log("LLAVA : "+ yy_.yytext); return 30
break;
case 16: console.log("LLAVC : "+ yy_.yytext); return 32
break;
case 17: console.log("MAS : "+ yy_.yytext); return 58
break;
case 18: console.log("MAS : "+ yy_.yytext); return 63
break;
case 19: console.log("MAS : "+ yy_.yytext); return 62
break;
case 20: console.log("MENOS : "+ yy_.yytext); return 59
break;
case 21: console.log("MULTI : "+ yy_.yytext); return 60
break;
case 22: console.log("DIV : "+ yy_.yytext); return 61
break;
case 23: console.log("MENORIGUAL : "+ yy_.yytext); return 68
break;
case 24: console.log("MENORQUE : "+ yy_.yytext); return 70
break;
case 25: console.log("MAYORIGUAL : "+ yy_.yytext); return 69
break;
case 26: console.log("MAYORQUE : "+ yy_.yytext); return 67
break;
case 27: console.log("AND : "+ yy_.yytext); return 64
break;
case 28: console.log("OR : "+ yy_.yytext); return 65
break;
case 29: console.log("NOT : "+ yy_.yytext); return 66
break;
case 30: console.log("EVALUAR : "+ yy_.yytext); return 'EVALUAR'
break;
case 31: console.log("TRUE : "+ yy_.yytext); return 77
break;
case 32: console.log("FALSE : "+ yy_.yytext); return 78
break;
case 33: console.log("INT : "+ yy_.yytext); return 34
break;
case 34: console.log("DOUBLE : "+ yy_.yytext); return 35
break;
case 35: console.log("STRING : "+ yy_.yytext); return 36
break;
case 36: console.log("CHAR : "+ yy_.yytext); return 37
break;
case 37: console.log("BOOLEAN : "+ yy_.yytext); return 38
break;
case 38: console.log("PRINT : "+ yy_.yytext); return 54
break;
case 39: console.log("IF : "+ yy_.yytext); return 42
break;
case 40: console.log("SWITCH : "+ yy_.yytext); return 46
break;
case 41: console.log("CASE : "+ yy_.yytext); return 48
break;
case 42: console.log("DEFAULT : "+ yy_.yytext); return 50
break;
case 43: console.log("DO : "+ yy_.yytext); return 52
break;
case 44: console.log("WHILE : "+ yy_.yytext); return 51
break;
case 45: console.log("FOR_CIC : "+ yy_.yytext); return 53
break;
case 46: console.log("ELSE : "+ yy_.yytext); return 45
break;
case 47: console.log("VOID : "+ yy_.yytext); return 55
break;
case 48: console.log("EJECUTAR : "+ yy_.yytext); return 18
break;
case 49: console.log("BREAK : "+ yy_.yytext); return 19
break;
case 50: console.log("RETURN : "+ yy_.yytext); return 20
break;
case 51: console.log("CONTINUE : "+ yy_.yytext); return 22
break;
case 52: console.log("CONTINUE : "+ yy_.yytext); return 29
break;
case 53: console.log("DECIMAL : "+ yy_.yytext); return 73
break;
case 54: console.log("ENTERO : "+ yy_.yytext); return 74
break;
case 55: console.log("ID : "+ yy_.yytext.toString()); return 27
break;
case 56: console.log("CADENA : "+ yy_.yytext); return 75
break;
case 57: console.log("CHARVAR : "+ yy_.yytext); return 76
break;
case 58:/* skip whitespace */
break;
case 59:return 5
break;
case 60: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));

                        new errores.default('Lexico', 'El caracter ' + yy_.yytext 
                                + ' no forma parte del lenguaje', 
                                yy_.yylineno+1, 
                                yy_.yylloc.last_column+1); 
                                      
                        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:new\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = A_interprete;
exports.Parser = A_interprete.Parser;
exports.parse = function () { return A_interprete.parse.apply(A_interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}