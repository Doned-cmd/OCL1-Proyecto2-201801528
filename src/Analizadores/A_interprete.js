/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var A_interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,12],$V2=[1,13],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,16],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,17],$Vd=[1,21],$Ve=[2,5,16,17,20,21,22,23,24,26,31,35,37,38,39,40],$Vf=[1,35],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[15,25],$Vk=[1,56],$Vl=[1,59],$Vm=[1,52],$Vn=[1,51],$Vo=[1,50],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,57],$Vt=[1,58],$Vu=[15,33],$Vv=[2,5,16,17,20,21,22,23,24,26,31,32,35,37,38,39,40,44,49,56,57,58,59,60],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[15,25,33,43,44,45,46,47,48,50,51,52,53,54,55,61,62],$VK=[25,33],$VL=[15,25,33,47,48,61,62],$VM=[15,25,33,43,44,47,48,50,51,52,53,54,55,61,62],$VN=[15,25,33,47,48,50,51,52,53,54,55,61,62],$VO=[1,130];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"print":9,"sent_if":10,"sent_while":11,"sent_for":12,"funciones":13,"llamada":14,"PYC":15,"EJECUTAR":16,"BREAK":17,"tipo":18,"lista_simbolos":19,"INT":20,"DOUBLE":21,"STRING":22,"CHAR":23,"BOOLEAN":24,"COMA":25,"ID":26,"IGUAL":27,"e":28,"incremento":29,"asignacionFor":30,"IF":31,"PARA":32,"PARC":33,"LLAVA":34,"LLAVC":35,"ELSE":36,"WHILE":37,"FOR_CIC":38,"PRINT":39,"VOID":40,"lista_parametros":41,"lista_exp":42,"MAS":43,"MENOS":44,"MULTI":45,"DIV":46,"AND":47,"OR":48,"NOT":49,"MAYORQUE":50,"MENORIGUAL":51,"MAYORIGUAL":52,"MENORQUE":53,"IGUALIGUAL":54,"NOTIGUAL":55,"DECIMAL":56,"ENTERO":57,"CADENA":58,"TRUE":59,"FALSE":60,"INTERROGACION":61,"DSPNTS":62,"INCRE":63,"DECRE":64,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"PYC",16:"EJECUTAR",17:"BREAK",20:"INT",21:"DOUBLE",22:"STRING",23:"CHAR",24:"BOOLEAN",25:"COMA",26:"ID",27:"IGUAL",31:"IF",32:"PARA",33:"PARC",34:"LLAVA",35:"LLAVC",36:"ELSE",37:"WHILE",38:"FOR_CIC",39:"PRINT",40:"VOID",43:"MAS",44:"MENOS",45:"MULTI",46:"DIV",47:"AND",48:"OR",49:"NOT",50:"MAYORQUE",51:"MENORIGUAL",52:"MAYORIGUAL",53:"MENORQUE",54:"IGUALIGUAL",55:"NOTIGUAL",56:"DECIMAL",57:"ENTERO",58:"CADENA",59:"TRUE",60:"FALSE",61:"INTERROGACION",62:"DSPNTS",63:"INCRE",64:"DECRE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,3],[6,2],[6,1],[7,3],[18,1],[18,1],[18,1],[18,1],[18,1],[19,3],[19,5],[19,1],[19,3],[8,4],[8,3],[30,3],[30,2],[10,7],[10,11],[10,9],[11,7],[12,10],[12,10],[9,5],[13,7],[13,8],[41,4],[41,2],[14,3],[14,4],[42,3],[42,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,5],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$= new ast.default($$[$0-1]);  return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = $$[$0-1]; 
break;
case 12:
 this.$ = new ejecutar.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 13:
 this.$ = new detener.default(); 
break;
case 14:
 console.log("Error Sintactico" + yytext 
                                    + "linea: " + this._$.first_line 
                                    + "columna: " + this._$.first_column); 
                        
                                new errores.default("Lexico", "No se esperaba el caracter "+ yytext , 
                                                this._$.first_line ,this._$.first_column);            
                            
break;
case 15:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 16:
 this.$ = new tipo.default('ENTERO'); 
break;
case 17:
 this.$ = new tipo.default('DOBLE'); 
break;
case 18:
 this.$ = new tipo.default('STRING'); 
break;
case 19:
 this.$ = new tipo.default('CHAR'); 
break;
case 20:
 this.$ = new tipo.default('BOOLEAN'); 
break;
case 21:
 this.$ = $$[$0-2]; this.$.push(new simbolo.default(1,null,$$[$0], null)); 
break;
case 22:
 this.$ = $$[$0-4]; this.$.push(new simbolo.default(1,null,$$[$0-2], $$[$0])); 
break;
case 23:
 this.$ = new Array(); this.$.push(new simbolo.default(1,null,$$[$0], null)); 
break;
case 24:
 this.$ = new Array(); this.$.push(new simbolo.default(1,null,$$[$0-2], $$[$0])); 
break;
case 25:
 this.$ = new asignacion.default($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 26:
 this.$ = new asignacionTardia.default($$[$0-2],$$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 27:
 this.$ = new asignacion.default($$[$0-2],$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 28:
 this.$ = new asignacionTardia.default($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 29:
 this.$ = new Ifs.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 30:
 this.$ = new Ifs.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 31:
 this.$ = new Ifs.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 32:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 33:
 this.$ = new For.default($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1],false, _$[$0-9].first_line, _$[$0-9].last_column); 
break;
case 34:
 this.$ = new For.default($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1],true, _$[$0-9].first_line, _$[$0-9].last_column); 
break;
case 35:
this.$ = new Print.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 36:
 this.$ = new funcion.default(3, new tipo.default('VOID'), $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column ); 
break;
case 37:
 this.$ = new funcion.default(3, new tipo.default('VOID'), $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column ); 
break;
case 38:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6,$$[$0-1], $$[$0], null)); 
break;
case 39:
 this.$ = new Array(); this.$.push(new simbolo.default(6,$$[$0-1],$$[$0], null)); 
break;
case 40:
 this.$ = new llamada.default($$[$0-2], [],_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 41:
 this.$ = new llamada.default($$[$0-3], $$[$0-1] ,_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 42:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 43:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 44:
this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 45:
this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 46:
this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 47:
this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 48: case 49:
this.$ = new logica.default($$[$0-2], '&&', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 50:
this.$ = new logica.default($$[$0], '!', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 51:
this.$ = new relacional.default($$[$0-2], '>', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 52:
this.$ = new relacional.default($$[$0-2], '<=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 53:
this.$ = new relacional.default($$[$0-2], '>=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 54:
this.$ = new relacional.default($$[$0-2], '<', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 55:
this.$ = new relacional.default($$[$0-2], '==', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 56:
this.$ = new relacional.default($$[$0-2], '!=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 57:
this.$ = new aritmetica.default($$[$0], 'UNARIO', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 58:
this.$ = $$[$0-1];
break;
case 59: case 60:
this.$ = new primitivo.default(Number(yytext), $$[$0].first_line, $$[$0].last_column);
break;
case 61: case 62:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], $$[$0].first_line, $$[$0].last_column);
break;
case 63:
this.$ = new primitivo.default(true, $$[$0].first_line, $$[$0].last_column);
break;
case 64:
this.$ = new primitivo.default(false, $$[$0].first_line, $$[$0].last_column);
break;
case 65:
this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 66:
this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 67:
this.$ = new aritmetica.default(new primitivo.default(0, $$[$0].first_line, $$[$0].last_column),  '+', new primitivo.default(1, $$[$0].first_line, $$[$0].last_column), $$[$0].first_line, $$[$0].last_column, false);
break;
case 68:
this.$ = new aritmetica.default(new primitivo.default(0, $$[$0].first_line, $$[$0].last_column), '-', new primitivo.default(1, $$[$0].first_line, $$[$0].last_column), $$[$0].first_line, $$[$0].last_column, false);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},{1:[3]},{2:$V0,5:[1,27],6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{15:[1,29]},{14:30,26:[1,31]},{15:[1,32]},o($Ve,[2,14]),{19:33,26:[1,34]},{27:$Vf,29:36,32:$Vg,63:$Vh,64:$Vi},{32:[1,40]},{32:[1,41]},{32:[1,42]},{32:[1,43]},{26:[1,44]},{26:[2,16]},{26:[2,17]},{26:[2,18]},{26:[2,19]},{26:[2,20]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,11]),{15:[1,45]},{32:$Vg},o($Ve,[2,13]),{15:[1,46],25:[1,47]},o($Vj,[2,23],{27:[1,48]}),{23:$Vk,26:$Vl,28:49,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{15:[1,60]},{23:$Vk,26:$Vl,28:63,32:$Vm,33:[1,61],42:62,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},o($Vu,[2,67]),o($Vu,[2,68]),{23:$Vk,26:$Vl,28:64,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:65,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:66,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{7:67,8:68,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:[1,69]},{32:[1,70]},o($Ve,[2,12]),o($Vv,[2,15]),{26:[1,71]},{23:$Vk,26:$Vl,28:72,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{15:[1,73],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{23:$Vk,26:$Vl,28:87,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:88,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:89,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},o($VJ,[2,59]),o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,64]),o($VJ,[2,65]),o($Vv,[2,26]),{15:[2,40]},{25:[1,91],33:[1,90]},o($VK,[2,43],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI}),{33:[1,92],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{33:[1,93],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{33:[1,94],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{23:$Vk,26:$Vl,28:95,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:96,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{27:$Vf,29:36,63:$Vh,64:$Vi},{18:99,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,33:[1,97],41:98},o($Vj,[2,21],{27:[1,100]}),o($Vj,[2,24],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI}),o($Vv,[2,25]),{23:$Vk,26:$Vl,28:101,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:102,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:103,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:104,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:105,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:106,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:107,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:108,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:109,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:110,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:111,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:112,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{23:$Vk,26:$Vl,28:113,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},o($VL,[2,50],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH}),o($VJ,[2,57]),{33:[1,114],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{15:[2,41]},{23:$Vk,26:$Vl,28:115,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{15:[1,116]},{34:[1,117]},{34:[1,118]},{15:[1,119],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{15:[1,120],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{34:[1,121]},{25:[1,123],33:[1,122]},{26:[1,124]},{23:$Vk,26:$Vl,28:125,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},o($VM,[2,44],{45:$Vy,46:$Vz}),o($VM,[2,45],{45:$Vy,46:$Vz}),o($VJ,[2,46]),o($VJ,[2,47]),o($VL,[2,48],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH}),o([15,25,33,48,61,62],[2,49],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH}),o($VN,[2,51],{43:$Vw,44:$Vx,45:$Vy,46:$Vz}),o($VN,[2,52],{43:$Vw,44:$Vx,45:$Vy,46:$Vz}),o($VN,[2,53],{43:$Vw,44:$Vx,45:$Vy,46:$Vz}),o($VN,[2,54],{43:$Vw,44:$Vx,45:$Vy,46:$Vz}),o($VN,[2,55],{43:$Vw,44:$Vx,45:$Vy,46:$Vz}),o($VN,[2,56],{43:$Vw,44:$Vx,45:$Vy,46:$Vz}),{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI,62:[1,126]},o($VJ,[2,58]),o($VK,[2,42],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI}),o($Ve,[2,35]),{2:$V0,4:127,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},{2:$V0,4:128,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},{26:$VO,30:129},{26:$VO,30:131},{2:$V0,4:132,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},{34:[1,133]},{18:134,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7},o($VK,[2,39]),o($Vj,[2,22],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI}),{23:$Vk,26:$Vl,28:135,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,35:[1,136],37:$Va,38:$Vb,39:$Vc,40:$Vd},{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,35:[1,137],37:$Va,38:$Vb,39:$Vc,40:$Vd},{33:[1,138]},{27:[1,139],29:140,63:$Vh,64:$Vi},{33:[1,141]},{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,35:[1,142],37:$Va,38:$Vb,39:$Vc,40:$Vd},{2:$V0,4:143,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},{26:[1,144]},o([15,25,33,62],[2,66],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI}),o($Ve,[2,29],{36:[1,145]}),o($Ve,[2,32]),{34:[1,146]},{23:$Vk,26:$Vl,28:147,32:$Vm,44:$Vn,49:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt},{33:[2,28]},{34:[1,148]},o($Ve,[2,36]),{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,35:[1,149],37:$Va,38:$Vb,39:$Vc,40:$Vd},o($VK,[2,38]),{10:151,31:$V9,34:[1,150]},{2:$V0,4:152,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},{33:[2,27],43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,61:$VI},{2:$V0,4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},o($Ve,[2,37]),{2:$V0,4:154,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd},o($Ve,[2,31]),{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,35:[1,155],37:$Va,38:$Vb,39:$Vc,40:$Vd},{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,35:[1,156],37:$Va,38:$Vb,39:$Vc,40:$Vd},{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,18:15,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,26:$V8,31:$V9,35:[1,157],37:$Va,38:$Vb,39:$Vc,40:$Vd},o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,30])],
defaultActions: {22:[2,16],23:[2,17],24:[2,18],25:[2,19],26:[2,20],27:[2,1],61:[2,40],90:[2,41],140:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const evaluar = require('../Clases/Evaluar');
    const aritmetica = require('../Clases/Expresiones/Operaciones/Aritmetica');
    const logica = require('../Clases/Expresiones/Operaciones/Logica');
    const relacional = require('../Clases/Expresiones/Operaciones/Relacional');
    const primitivo = require('../Clases/Expresiones/Primitivo');


    const ast = require('../Clases/Ast/Ast');
    const declaracion = require('../Clases/Instrucciones/Declaracion');
    const asignacion = require('../Clases/Instrucciones/Asignacion');
    const asignacionTardia = require('../Clases/Instrucciones/AsignacionTardia');
    const simbolo = require('../Clases/TablaSimbolos/Simbolos');
    const tipo = require('../Clases/TablaSimbolos/Tipo');

    const identificador = require('../Clases/Expresiones/Identificador');
    const ternario = require('../Clases/Expresiones/Ternario');

    const Print = require('../Clases/Instrucciones/Print');
    const Ifs = require('../Clases/Instrucciones/SentenciaControl/Ifs');
    const While = require('../Clases/Instrucciones/SentenciaCiclica/While');
    const For = require('../Clases/Instrucciones/SentenciaCiclica/For');

    const funcion = require('../Clases/Instrucciones/Funcion');
    const llamada = require('../Clases/Instrucciones/Llamada');

    const ejecutar = require('../Clases/Instrucciones/Ejecutar');

    const detener = require('../Clases/Instrucciones/SentenciaTransferencia/Break');
    const errores = require('../Clases/Ast/Errores');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 32
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 'CORA'
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 'CORC'
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 15
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 27
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 61
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 'EVALUAR'
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 23
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 16
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 17
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 23
break;
case 49:/* skip whitespace */
break;
case 50:return 5
break;
case 51: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));

                        new errores.default('Lexico', 'El caracter ' + yy_.yytext 
                                + ' no forma parte del lenguaje', 
                                yy_.yylineno+1, 
                                yy_.yylloc.last_column+1); 
                                      
                        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:break\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = A_interprete;
exports.Parser = A_interprete.Parser;
exports.parse = function () { return A_interprete.parse.apply(A_interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}